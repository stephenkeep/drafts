{
  "name": "scribe-editor",
  "version": "0.1.17",
  "main": "src/scribe.js",
  "dependencies": {
    "lodash-amd": "~2.4.1",
    "scribe-common": "~0.0.4"
  },
  "devDependencies": {
    "chai": "~1.9.1",
    "connect": "~2.12.0",
    "http-server": "~0.6.1",
    "lodash-node": "~2.4.1",
    "mocha": "~1.18.2",
    "mversion": "~0.4.3",
    "plumber-cli": "~0.3.0",
    "plumber": "~0.3.0",
    "plumber-all": "~0.3.0",
    "plumber-glob": "~0.3.0",
    "plumber-requirejs": "~0.3.0",
    "plumber-uglifyjs": "~0.3.0",
    "plumber-write": "~0.3.0",
    "q": "~1.0.0",
    "request": "~2.33.0",
    "selenium-webdriver": "~2.41.0",
    "scribe-test-harness": "~0.0.6"
  },
  "scripts": {
    "test": "./run-tests.sh"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/guardian/scribe.git"
  },
  "readme": "Scribe [![Build Status](https://travis-ci.org/guardian/scribe.svg?branch=master)](https://travis-ci.org/guardian/scribe)\n======\n\nA rich text editor framework for the web platform, with patches for\nbrowser inconsistencies and sensible defaults.\n\nFor an introduction, you may want to read the blog post [Inside the Guardian’s CMS: meet Scribe, an extensible rich text editor](http://www.theguardian.com/info/developer-blog/2014/mar/20/inside-the-guardians-cms-meet-scribe-an-extensible-rich-text-editor).\n\n**Please note:** There is a lot of missing documentation for Scribe and many of\nits plugins. We plan to improve this, however in the meantime we encourage\nyou to look at the code. Scribe is very small in comparison to other libraries\nof its kind.\n\nYou can join us on IRC at [#scribejs] on freenode, or via the [Google Group](https://groups.google.com/forum/#!forum/scribe-editor).\n\n[See an example][example].\n\n## Core\n\nAt the core of Scribe we have:\n\n* [Patches for many browser inconsistencies surrounding `contenteditable`](#patches);\n* [Inline and block element modes](#modes).\n\n### Patches\n\nScribe patches [many browser inconsistencies][browser inconsistencies] in the\n[native command API][Executing Commands].\n\n### Modes\n\nNatively, `contenteditable` will produce DIVs for new lines. This is not a bug.\nHowever, this is not ideal because in most cases we require semantic HTML to be\nproduced.\n\nScribe overrides this behaviour to produce paragraphs (Ps; default) or BRs (with\nblock element mode turned off) for new lines instead.\n\n## Installation\n```\nbower install scribe\n```\n\nAlternatively, you can [access the distribution files through GitHub releases](https://github.com/guardian/scribe/releases).\n\n## Options\n\n<dl>\n  <dt><pre>allowBlockElements</pre></dt>\n  <dd>Enable/disable block element mode (enabled by default)</dd>\n</dl>\n\n## Usage Example\n\nScribe is an AMD module:\n\n``` js\nrequire(['scribe', 'scribe-plugin-blockquote-command', 'scribe-plugin-toolbar'],\n  function (Scribe, scribePluginBlockquoteCommand, scribePluginToolbar) {\n  var scribeElement = document.querySelector('.scribe');\n  // Create an instance of Scribe\n  var scribe = new Scribe(scribeElement);\n\n  // Use some plugins\n  scribe.use(scribePluginBlockquoteCommand());\n  var toolbarElement = document.querySelector('.toolbar');\n  scribe.use(scribePluginToolbar(toolbarElement));\n});\n```\n\nYou can [see a live example here][example], or [view the code here](https://github.com/guardian/scribe/tree/gh-pages).\n\nAlso be sure to check the [`examples`](./examples) directory for an\nAMD syntax example as well as a CommonJS (browserify) example.\n\n## Architecture\n\n* [Everything is a plugin](https://github.com/guardian/scribe/tree/master/src/plugins).\n* No runtime dependencies.\n\nA plugin is simply a function that receives Scribe as an argument:\n\n``` js\nfunction myPlugin(scribe) {}\n```\n\nA consumer can then use your plugin with `Scribe.use`:\n\n``` js\nscribe.use(myPlugin);\n```\n\nPlugins may package whatever functionality you desire, and you are free to use\nnative APIs to do so. However, you are required to wrap any DOM manipulation in\na transaction, so that we can capture state changes for the history. For\nexample:\n\n``` js\nfunction myPlugin(scribe) {\n  scribe.transactionManager.run(function () {\n    // Do some fancy DOM manipulation\n  });\n}\n```\n\n### Browser Support\n\nTheoretically, Scribe should work in any browser with the\n[Selection][Selection API] API, the [Range][Range API] API, and support for most\nof the non-standardised list of commands that appears in\n[this MDN article][Executing Commands]. It has been tested in Firefox >= 21,\nChrome >= 27, and Safari 7.\n\nSee the [status of our integration tests](https://travis-ci.org/guardian/scribe)\nfor more up-to-date support information.\n\n### Commands\n\nCommands are objects that describe formatting operations. For example,\nthe bold command.\n\nCommands tell Scribe:\n\n* how to format some HTML when executed (similar to `document.queryCommand`);\n* how to query for whether the given command has been executed on the current selection (similar to `document.queryCommandState`);\n* how to query for whether the command can be executed on the document in its current state (similar to `document.queryCommandEnabled`)\n\nTo ensure a separation of concerns, commands are split into multiple layers.\nWhen a command method is called by Scribe, it will be filtered through these\nlayers sequentially.\n\n<dl>\n  <dt>Scribe</dt>\n  <dd>Where custom behaviour is defined.</dd>\n  <dt>Scribe Patches</dt>\n  <dd>Where patches for brower inconsistencies in native commands are defined.</dd>\n  <dt>Native</dt>\n</dl>\n\n## Plugins\n\nWe have created a collection of plugins for advanced rich text editing purposes,\nall of which can be seen in use in our [example][example].\n* [scribe-plugin-keyboard-shortcuts](https://github.com/guardian/scribe-plugin-keyboard-shortcuts)\n* [scribe-plugin-blockquote-command](https://github.com/guardian/scribe-plugin-blockquote-command)\n* [scribe-plugin-formatter-html-ensure-semantic-elements](https://github.com/guardian/scribe-plugin-formatter-html-ensure-semantic-elements)\n* [scribe-plugin-formatter-plain-text-convert-new-lines-to-html](https://github.com/guardian/scribe-plugin-formatter-plain-text-convert-new-lines-to-html)\n* [scribe-plugin-curly-quotes](https://github.com/guardian/scribe-plugin-curly-quotes)\n* [scribe-plugin-heading-command](https://github.com/guardian/scribe-plugin-heading-command)\n* [scribe-plugin-intelligent-unlink-command](https://github.com/guardian/scribe-plugin-intelligent-unlink-command)\n* [scribe-plugin-inline-styles-to-elements](https://github.com/guardian/scribe-plugin-inline-styles-to-elements)\n* [scribe-plugin-link-prompt-command](https://github.com/guardian/scribe-plugin-link-prompt-command)\n* [scribe-plugin-sanitizer](https://github.com/guardian/scribe-plugin-sanitizer)\n* [scribe-plugin-smart-lists](https://github.com/guardian/scribe-plugin-smart-lists)\n* [scribe-plugin-toolbar](https://github.com/guardian/scribe-plugin-toolbar)\n\n## FAQ\n\n### Is it production ready?\n\nYes. [The Guardian](http://gu.com) is using Scribe as the basis for their\ninternal CMS’ rich text editor.\n\nIt is likely that there will be unknown edge cases, but these will be addressed\nwhen they are discovered.\n\n### Why does Scribe have a custom undo manager?\n\nThe [native API for formatting content in a\n`contenteditable`][Executing Commands] has [many browser inconsistencies][browser inconsistencies].\nScribe has to manipulate the DOM directly on top of using these commands in order to patch\nthose inconsistencies. What’s more, there is no widely supported command for\ntelling `contenteditable` to insert Ps or BRs for line breaks. Thus, to add\nthis behaviour Scribe needs to manipulate the DOM once again.\n\nThe undo stack breaks whenever DOM manipulation is used instead of the native\ncommand API, therefore we have to use our own.\n\n[browser inconsistencies]: https://github.com/guardian/scribe/blob/master/BROWSERINCONSISTENCIES.md\n[Executing Commands]: https://developer.mozilla.org/en-US/docs/Rich-Text_Editing_in_Mozilla#Executing_Commands\n[Range API]: https://developer.mozilla.org/en-US/docs/Web/API/Range\n[Selection API]: https://developer.mozilla.org/en-US/docs/Web/API/Selection\n[example]: http://guardian.github.io/scribe\n",
  "readmeFilename": "README.md",
  "description": "Scribe [![Build Status](https://travis-ci.org/guardian/scribe.svg?branch=master)](https://travis-ci.org/guardian/scribe) ======",
  "bugs": {
    "url": "https://github.com/guardian/scribe/issues"
  },
  "homepage": "https://github.com/guardian/scribe",
  "_id": "scribe-editor@0.1.17",
  "_from": "scribe-editor@"
}
